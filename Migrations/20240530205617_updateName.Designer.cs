// <auto-generated />
using System;
using KitabGhar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KitabGhar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240530205617_updateName")]
    partial class updateName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KitabGhar.Areas.Identity.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("KitabGhar.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Fiction",
                            DisplayOrder = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Fantasy",
                            DisplayOrder = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Self-Help",
                            DisplayOrder = 3
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Romance",
                            DisplayOrder = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Thriller",
                            DisplayOrder = 5
                        });
                });

            modelBuilder.Entity("KitabGhar.Models.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "James Clear",
                            CategoryId = 3,
                            Description = "Self help books containing tried and tested ways for changing habits.",
                            ISBN = "SWD9999001",
                            ImageUrl = "/images/Atomic_Habits.jpg",
                            Price = 650.0,
                            Title = "Atomic Habits"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Harper Lee",
                            CategoryId = 1,
                            Description = "A classic novel that explores racial injustice and moral growth in the American South.",
                            ISBN = "B00K4B1W7U",
                            ImageUrl = "/images/To_Kill_A_Mockingbird.jpg",
                            Price = 1200.0,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 3,
                            Author = "George Orwell",
                            CategoryId = 1,
                            Description = "A dystopian novel set in a totalitarian society where independent thought is suppressed.",
                            ISBN = "B003JTHWKU",
                            ImageUrl = "/images/1984.jpg",
                            Price = 1500.0,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Jane Austen",
                            CategoryId = 4,
                            Description = "A timeless romance novel featuring the headstrong Elizabeth Bennet and the enigmatic Mr. Darcy.",
                            ISBN = "B008476HBM",
                            ImageUrl = "/images/Pride_And_Prejudice.jpg",
                            Price = 1000.0,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 5,
                            Author = "F. Scott Fitzgerald",
                            CategoryId = 1,
                            Description = "A Jazz Age novel that delves into themes of wealth, love, and the American Dream.",
                            ISBN = "B00JH1T8JG",
                            ImageUrl = "/images/The_Great_Gatsby.jpg",
                            Price = 1400.0,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 6,
                            Author = "J.D. Salinger",
                            CategoryId = 1,
                            Description = "A coming-of-age novel following the rebellious Holden Caulfield.",
                            ISBN = "B003JTHWKU",
                            ImageUrl = "/images/The_Catcher_in_the_Rye.jpg",
                            Price = 1100.0,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 7,
                            Author = "J.R.R. Tolkien",
                            CategoryId = 2,
                            Description = "A fantasy adventure about Bilbo Baggins and his quest for treasure.",
                            ISBN = "B007978OY6",
                            ImageUrl = "/images/The_Hobbit.jpg",
                            Price = 1300.0,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 8,
                            Author = "J.K. Rowling",
                            CategoryId = 2,
                            Description = "The first book in the beloved Harry Potter series, filled with magic, friendship, and adventure.",
                            ISBN = "B0192CTMX0",
                            ImageUrl = "/images/Harry_Potter.jpg",
                            Price = 2000.0,
                            Title = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = 9,
                            Author = "J.R.R. Tolkien",
                            CategoryId = 2,
                            Description = "The epic fantasy saga begins with a journey to destroy a powerful ring.",
                            ISBN = "B007978OY6",
                            ImageUrl = "/images/Lord_of_the_Rings.jpg",
                            Price = 1800.0,
                            Title = "The Lord of the Rings: The Fellowship of the Ring"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Paulo Coelho",
                            CategoryId = 1,
                            Description = "A philosophical novel about a shepherd boy's quest for treasure and self-discovery.",
                            ISBN = "B00U6SFUSS",
                            ImageUrl = "/images/The_Alchemist.jpg",
                            Price = 900.0,
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = 11,
                            Author = "Cormac McCarthy",
                            CategoryId = 1,
                            Description = "A post-apocalyptic novel following a father and son's journey through a desolate landscape.",
                            ISBN = "B002RI9WUQ",
                            ImageUrl = "/images/The_Road.jpg",
                            Price = 1600.0,
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 12,
                            Author = "Khaled Hosseini",
                            CategoryId = 1,
                            Description = "A powerful story of friendship, betrayal, and redemption set in Afghanistan.",
                            ISBN = "B000OCXF6W",
                            ImageUrl = "/images/The_Kite_Runner.jpg",
                            Price = 1300.0,
                            Title = "The Kite Runner"
                        },
                        new
                        {
                            Id = 13,
                            Author = "Markus Zusak",
                            CategoryId = 1,
                            Description = "A novel narrated by Death, centered around a young girl during World War II.",
                            ISBN = "B001NLKT2M",
                            ImageUrl = "/images/The_Book_Thief.jpg",
                            Price = 1400.0,
                            Title = "The Book Thief"
                        },
                        new
                        {
                            Id = 14,
                            Author = "Suzanne Collins",
                            CategoryId = 1,
                            Description = "The first book in a dystopian trilogy where teenagers fight to the death in a televised event.",
                            ISBN = "B002MQYOFW",
                            ImageUrl = "/images/The_Hunger_Games.jpg",
                            Price = 1100.0,
                            Title = "The Hunger Games"
                        },
                        new
                        {
                            Id = 15,
                            Author = "Dan Brown",
                            CategoryId = 5,
                            Description = "A thrilling mystery involving art, religion, and secret societies.",
                            ISBN = "B000FA5T3K",
                            ImageUrl = "/images/The_Da_Vinci_Code.jpg",
                            Price = 1200.0,
                            Title = "The Da Vinci Code"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KitabGhar.Models.ProductModel", b =>
                {
                    b.HasOne("KitabGhar.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("KitabGhar.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("KitabGhar.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KitabGhar.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("KitabGhar.Areas.Identity.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
